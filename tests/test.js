// Generated by CoffeeScript 1.6.3
(function() {
  var Sinew, assert, should, _;

  assert = require('assert');

  should = require('should');

  Sinew = require('../index');

  _ = require('lodash');

  (function() {
    return describe('Sinew', function() {
      describe('#_construct', function() {
        it('should throw an error when filter is not a function', function() {
          assert.throws(function() {
            var options, sinew;
            options = {
              filter: ''
            };
            sinew = new Sinew(options);
          });
        });
        it('should throw an error when filter function does not return a boolean', function() {
          assert.throws(function() {
            var options, sinew;
            options = {
              filter: function() {
                return '';
              }
            };
            sinew = new Sinew(options);
          });
        });
      });
      describe('#create', function() {
        it('should privatize underscore-prefixed functions', function() {
          var TestObject, sinew, t;
          sinew = new Sinew();
          TestObject = function() {
            var self;
            self = this;
            self._hidden = function() {};
            self.visible = function() {};
            self._setup = function() {
              return sinew.setup(self, TestObject);
            };
            return self._setup();
          };
          t = new TestObject();
          t.should.have.key('visible');
          t.should.not.have.keys('_hidden', '_setup');
        });
        it('should privatize functions with a custom filter', function() {
          var TestObject, sinew, t;
          sinew = new Sinew({
            filter: function(x) {
              return x.indexOf('private') === -1;
            }
          });
          TestObject = function() {
            var self;
            self = this;
            self._hidden = function() {};
            self.privateThing = function() {};
            self.visible = function() {};
            self.privateSetup = function() {
              return sinew.setup(self, TestObject);
            };
            return self.privateSetup();
          };
          t = new TestObject();
          t.should.have.key('visible', '_hidden');
          t.should.not.have.keys('privateThing', 'privateSetup');
        });
      });
      describe('#makeNew', function() {
        it('should enforce the `new` keyword', function() {
          var TestObject, sinew, t;
          sinew = new Sinew();
          TestObject = function() {
            var self;
            self = sinew.makeNew(this, TestObject);
            self.test = function() {};
            return self;
          };
          t = TestObject();
          t.should.be.an.instanceOf(TestObject);
        });
      });
      return describe('#pawn', function() {
        if (typeof module !== 'undefined') {
          it("shouldn't run in module context", function() {
            var TestObject, context, sinew, success, t;
            context = {
              prior: {
                property: true,
                name: 'pr10rc0n73x7'
              }
            };
            sinew = new Sinew();
            TestObject = function() {
              var self;
              self = sinew.makeNew(this, TestObject);
              self._hidden = function() {};
              self.visible = function() {};
              self._setup = function() {
                return sinew.setup(self, TestObject);
              };
              return self._setup();
            };
            t = TestObject();
            success = sinew.pawn('prior', t, context);
            success.should.be["false"];
          });
          it("shouldn't run in module context, unless explicitly enabled", function() {
            var TestObject, context, sinew, success, t;
            context = {
              prior: {
                property: true,
                name: 'pr10rc0n73x7'
              }
            };
            sinew = new Sinew({
              pawnClientOnly: false
            });
            TestObject = function() {
              var self;
              self = sinew.makeNew(this, TestObject);
              self.name = "n3wc0n73x7";
              self._hidden = function() {};
              self.visible = function() {};
              self._setup = function() {
                return sinew.setup(self, TestObject);
              };
              return self._setup();
            };
            t = TestObject();
            success = sinew.pawn('prior', t, context);
            success.should.not.be["false"];
            context.prior.should.equal(t);
          });
          it("should create a noConflict method on the pawned object", function() {
            var TestObject, context, sinew, success, t;
            context = {
              prior: {
                property: true,
                name: 'pr10rc0n73x7'
              }
            };
            sinew = new Sinew({
              pawnClientOnly: false
            });
            TestObject = function() {
              var self;
              self = sinew.makeNew(this, TestObject);
              self.name = "n3wc0n73x7";
              self._hidden = function() {};
              self.visible = function() {};
              self._setup = function() {
                return sinew.setup(self, TestObject);
              };
              return self._setup();
            };
            t = TestObject();
            success = sinew.pawn('prior', t, context);
            success.should.not.be["false"];
            context.prior.should.equal(t);
            context.prior.should.have.keys('name', 'visible', 'noConflict');
          });
          it("should restore prior context when the noConflict method is called", function() {
            var TestObject, clone, context, noconf, sinew, success, t;
            context = {
              prior: {
                property: true,
                name: 'pr10rc0n73x7'
              }
            };
            clone = _.extend({}, context);
            sinew = new Sinew({
              pawnClientOnly: false
            });
            TestObject = function() {
              var self;
              self = sinew.makeNew(this, TestObject);
              self.name = "n3wc0n73x7";
              self._hidden = function() {};
              self.visible = function() {};
              self._setup = function() {
                return sinew.setup(self, TestObject);
              };
              return self._setup();
            };
            t = TestObject();
            success = sinew.pawn('prior', t, context);
            success.should.not.be["false"];
            context.prior.should.equal(t);
            noconf = context.prior.noConflict();
            noconf.should.not.have.key('noConflict');
            context.prior.name.should.equal(clone.prior.name);
          });
        }
      });
    });
  })();

}).call(this);
